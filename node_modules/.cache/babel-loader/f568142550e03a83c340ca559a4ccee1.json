{"ast":null,"code":"/**\n * The base class for SDK Errors.\n */\nclass SDKError extends Error {\n  /**\n   * Constructor.\n   *\n   * @param {string} [name=<no_name>] Name for the Error\n   * @param {string} [type=<no_type>] type for the Error\n   * @param {string} [code=<no_type>] code for the Error\n   * @param {string} [message=<no_message>] The message for the Error\n   * @param {string} [details=<no_details>] The details associated with the Error\n   * @param {boolean} [captureStackTrace=Error.captureStackTrace] if available, capture the V8 stack trace\n   */\n  constructor() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    let message = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    let details = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n    let captureStackTrace = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Error.captureStackTrace;\n    super(message);\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (captureStackTrace && captureStackTrace instanceof Function) {\n      captureStackTrace(this, SDKError);\n    }\n    this.name = name || this.constructor.name;\n    this.message = message || this.constructor.message;\n    this.type = type || this.constructor.type;\n    this.code = code || this.constructor.code;\n    this.details = details || this.constructor.details;\n  }\n\n  /**\n   * Returns a JSON representation of this Error object.\n   *\n   * @returns {object} Object with error data\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      type: this.type,\n      code: this.code,\n      message: this.message,\n      details: this.details,\n      stacktrace: this.stack\n    };\n  }\n}\n\n/**\n * Convert standard Error to SDKError. Returns new instance of SDKError\n *\n * @param {string} error Error object\n * @param {string} [errorType] custom error type\n * @param {string} [code] custom error code\n * @returns {object} Object with error data\n */\nconst SDKErrorWrapper = function (error, errorType) {\n  let code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  const {\n    name,\n    type,\n    message,\n    details\n  } = error;\n  return new SDKError(name, type || errorType, code, message, details);\n};\nmodule.exports = {\n  SDKError,\n  SDKErrorWrapper\n};","map":{"version":3,"names":["SDKError","Error","constructor","name","type","code","message","details","captureStackTrace","Function","toJSON","stacktrace","stack","SDKErrorWrapper","error","errorType","module","exports"],"sources":["/Users/lamont/Workspace/andy/wknd-app/node_modules/@adobe/aem-headless-client-js/src/utils/errors.js"],"sourcesContent":["/**\n * The base class for SDK Errors.\n */\nclass SDKError extends Error {\n  /**\n   * Constructor.\n   *\n   * @param {string} [name=<no_name>] Name for the Error\n   * @param {string} [type=<no_type>] type for the Error\n   * @param {string} [code=<no_type>] code for the Error\n   * @param {string} [message=<no_message>] The message for the Error\n   * @param {string} [details=<no_details>] The details associated with the Error\n   * @param {boolean} [captureStackTrace=Error.captureStackTrace] if available, capture the V8 stack trace\n   */\n  constructor (\n    name = '',\n    type = '',\n    code = '',\n    message = '',\n    details = '',\n    captureStackTrace = Error.captureStackTrace\n  ) {\n    super(message)\n\n    // Maintains proper stack trace for where our error was thrown (only available on V8)\n    if (captureStackTrace && captureStackTrace instanceof Function) {\n      captureStackTrace(this, SDKError)\n    }\n    this.name = name || this.constructor.name\n    this.message = message || this.constructor.message\n    this.type = type || this.constructor.type\n    this.code = code || this.constructor.code\n    this.details = details || this.constructor.details\n  }\n\n  /**\n   * Returns a JSON representation of this Error object.\n   *\n   * @returns {object} Object with error data\n   */\n  toJSON () {\n    return {\n      name: this.name,\n      type: this.type,\n      code: this.code,\n      message: this.message,\n      details: this.details,\n      stacktrace: this.stack\n    }\n  }\n}\n\n/**\n * Convert standard Error to SDKError. Returns new instance of SDKError\n *\n * @param {string} error Error object\n * @param {string} [errorType] custom error type\n * @param {string} [code] custom error code\n * @returns {object} Object with error data\n */\nconst SDKErrorWrapper = (error, errorType, code = '') => {\n  const { name, type, message, details } = error\n  return new SDKError(name, type || errorType, code, message, details)\n}\n\nmodule.exports = {\n  SDKError,\n  SDKErrorWrapper\n}\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,QAAQ,SAASC,KAAK,CAAC;EAC3B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAW,GAOT;IAAA,IANAC,IAAI,uEAAG,EAAE;IAAA,IACTC,IAAI,uEAAG,EAAE;IAAA,IACTC,IAAI,uEAAG,EAAE;IAAA,IACTC,OAAO,uEAAG,EAAE;IAAA,IACZC,OAAO,uEAAG,EAAE;IAAA,IACZC,iBAAiB,uEAAGP,KAAK,CAACO,iBAAiB;IAE3C,KAAK,CAACF,OAAO,CAAC;;IAEd;IACA,IAAIE,iBAAiB,IAAIA,iBAAiB,YAAYC,QAAQ,EAAE;MAC9DD,iBAAiB,CAAC,IAAI,EAAER,QAAQ,CAAC;IACnC;IACA,IAAI,CAACG,IAAI,GAAGA,IAAI,IAAI,IAAI,CAACD,WAAW,CAACC,IAAI;IACzC,IAAI,CAACG,OAAO,GAAGA,OAAO,IAAI,IAAI,CAACJ,WAAW,CAACI,OAAO;IAClD,IAAI,CAACF,IAAI,GAAGA,IAAI,IAAI,IAAI,CAACF,WAAW,CAACE,IAAI;IACzC,IAAI,CAACC,IAAI,GAAGA,IAAI,IAAI,IAAI,CAACH,WAAW,CAACG,IAAI;IACzC,IAAI,CAACE,OAAO,GAAGA,OAAO,IAAI,IAAI,CAACL,WAAW,CAACK,OAAO;EACpD;;EAEA;AACF;AACA;AACA;AACA;EACEG,MAAM,GAAI;IACR,OAAO;MACLP,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,IAAI,EAAE,IAAI,CAACA,IAAI;MACfC,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBC,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBI,UAAU,EAAE,IAAI,CAACC;IACnB,CAAC;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAG,UAACC,KAAK,EAAEC,SAAS,EAAgB;EAAA,IAAdV,IAAI,uEAAG,EAAE;EAClD,MAAM;IAAEF,IAAI;IAAEC,IAAI;IAAEE,OAAO;IAAEC;EAAQ,CAAC,GAAGO,KAAK;EAC9C,OAAO,IAAId,QAAQ,CAACG,IAAI,EAAEC,IAAI,IAAIW,SAAS,EAAEV,IAAI,EAAEC,OAAO,EAAEC,OAAO,CAAC;AACtE,CAAC;AAEDS,MAAM,CAACC,OAAO,GAAG;EACfjB,QAAQ;EACRa;AACF,CAAC"},"metadata":{},"sourceType":"script"}