{"ast":null,"code":"import { ModelClient } from '@adobe/aem-spa-page-model-manager';\nimport auth from '@adobe/jwt-auth';\nimport { externalizePaths, contentPath } from './index';\nconst {\n  PUBLIC_URL,\n  REACT_APP_USE_PROXY\n} = process.env;\nexport class RemoteSpaModelClient extends ModelClient {\n  constructor(_ref) {\n    let {\n      apiHost,\n      authorization\n    } = _ref;\n    super(apiHost);\n    this.authorization = authorization || false;\n  }\n  async fetch(path) {\n    if (!path) return Promise.reject(new Error('Rejected fetching empty path.'));\n    let url = this.routeToAemPathFn(path);\n    if (REACT_APP_USE_PROXY) url = this.routeToAemPathFn(path);else url = `${this._apiHost}${url}`;\n    let headers = {};\n    if (this.authorization) {\n      headers.headers = await this._getHeaders(this.authorization);\n    }\n    ;\n    return fetch(url, headers).then(response => response.ok ? response.json() : Promise.reject(response)).then(data => externalizePaths(data)).catch(error => {\n      console.log(\"Error fetching\", error);\n      // return Promise.reject(error);\n    });\n  }\n\n  async _getHeaders(auth) {\n    var _auth$basic, _auth$basic2;\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n    if (auth !== null && auth !== void 0 && auth.credentials) {\n      const accessToken = await this._getAccessToken(auth.credentials);\n      headers.append('Authorization', 'Bearer ' + accessToken);\n    } else if (auth !== null && auth !== void 0 && auth.devToken) {\n      headers.append('Authorization', 'Bearer ' + auth.devToken);\n    } else if (auth !== null && auth !== void 0 && auth.basic && auth !== null && auth !== void 0 && (_auth$basic = auth.basic) !== null && _auth$basic !== void 0 && _auth$basic.user && auth !== null && auth !== void 0 && (_auth$basic2 = auth.basic) !== null && _auth$basic2 !== void 0 && _auth$basic2.password) {\n      const user = auth.basic.user;\n      const password = auth.basic.password;\n      headers.append('Authorization', 'Basic ' + btoa(user + ':' + password));\n    }\n    return headers;\n  }\n  async _getAccessToken(credentials) {\n    // This is the Service Credentials JSON object that must be exchanged with Adobe IMS for an access token\n    let serviceCredentials = credentials.integration;\n\n    // Use the @adobe/jwt-auth library to pass the service credentials generated a JWT and exchange that with Adobe IMS for an access token.\n    // If other programming languages are used, please see these code samples: https://www.adobe.io/authentication/auth-methods.html#!AdobeDocs/adobeio-auth/master/JWT/samples/samples.md\n    let {\n      access_token\n    } = await auth({\n      clientId: serviceCredentials.technicalAccount.clientId,\n      // Client Id\n      technicalAccountId: serviceCredentials.id,\n      // Technical Account Id\n      orgId: serviceCredentials.org,\n      // Adobe IMS Org Id\n      clientSecret: serviceCredentials.technicalAccount.clientSecret,\n      // Client Secret\n      privateKey: serviceCredentials.privateKey,\n      // Private Key to sign the JWT\n      metaScopes: serviceCredentials.metascopes.split(','),\n      // Meta Scopes defining level of access the access token should provide\n      ims: `https://${serviceCredentials.imsEndpoint}` // IMS endpoint used to obtain the access token from\n    });\n\n    return access_token;\n  }\n  routeToAemPathFn(route) {\n    if (route === PUBLIC_URL + '.model.json' || route === \"/.model.json\") {\n      route = contentPath + '.model.json';\n    } else if (route.startsWith(PUBLIC_URL)) {\n      route = route.replace(PUBLIC_URL, contentPath);\n    } else if (!route.startsWith(contentPath)) {\n      route = contentPath + route;\n    }\n    return route;\n  }\n}","map":{"version":3,"names":["ModelClient","auth","externalizePaths","contentPath","PUBLIC_URL","REACT_APP_USE_PROXY","process","env","RemoteSpaModelClient","constructor","apiHost","authorization","fetch","path","Promise","reject","Error","url","routeToAemPathFn","_apiHost","headers","_getHeaders","then","response","ok","json","data","catch","error","console","log","Headers","append","credentials","accessToken","_getAccessToken","devToken","basic","user","password","btoa","serviceCredentials","integration","access_token","clientId","technicalAccount","technicalAccountId","id","orgId","org","clientSecret","privateKey","metaScopes","metascopes","split","ims","imsEndpoint","route","startsWith","replace"],"sources":["/Users/lamont/Workspace/andy/wknd-app/src/utils/RemoteSpaModelClient.js"],"sourcesContent":["import { ModelClient } from '@adobe/aem-spa-page-model-manager';\r\nimport auth from '@adobe/jwt-auth';\r\nimport { externalizePaths, contentPath } from './index';\r\n\r\nconst { PUBLIC_URL, REACT_APP_USE_PROXY } = process.env;\r\n\r\nexport class RemoteSpaModelClient extends ModelClient {\r\n  constructor({ apiHost, authorization }) {\r\n    super(apiHost);\r\n    this.authorization = authorization || false;\r\n  }\r\n\r\n  async fetch(path) {\r\n    if (!path) return Promise.reject(new Error('Rejected fetching empty path.'));\r\n\r\n    let url = this.routeToAemPathFn(path);\r\n    if (REACT_APP_USE_PROXY) url = this.routeToAemPathFn(path)\r\n    else url = `${this._apiHost}${url}`;\r\n\r\n    let headers = {};\r\n    if (this.authorization) {\r\n      headers.headers = await this._getHeaders(this.authorization);\r\n    };\r\n\r\n    return fetch(url, headers)\r\n      .then((response) => response.ok ? response.json() : Promise.reject(response))\r\n      .then((data) => externalizePaths(data))\r\n      .catch((error) => {\r\n        console.log(\"Error fetching\", error)\r\n        // return Promise.reject(error);\r\n      });\r\n  }\r\n\r\n  async _getHeaders(auth) {\r\n    let headers = new Headers();\r\n\r\n    headers.append('Content-Type', 'application/json');\r\n\r\n    if (auth?.credentials) {\r\n      const accessToken = await this._getAccessToken(auth.credentials);\r\n      headers.append('Authorization', 'Bearer ' + accessToken);\r\n    } else if (auth?.devToken) {\r\n      headers.append('Authorization', 'Bearer ' + auth.devToken);\r\n\r\n    } else if (auth?.basic && auth?.basic?.user && auth?.basic?.password) {\r\n      const user = auth.basic.user;\r\n      const password = auth.basic.password;\r\n\r\n      headers.append('Authorization', 'Basic ' + btoa(user + ':' + password));\r\n    }\r\n\r\n    return headers;\r\n  }\r\n\r\n  async _getAccessToken(credentials) {\r\n\r\n    // This is the Service Credentials JSON object that must be exchanged with Adobe IMS for an access token\r\n    let serviceCredentials = credentials.integration;\r\n\r\n    // Use the @adobe/jwt-auth library to pass the service credentials generated a JWT and exchange that with Adobe IMS for an access token.\r\n    // If other programming languages are used, please see these code samples: https://www.adobe.io/authentication/auth-methods.html#!AdobeDocs/adobeio-auth/master/JWT/samples/samples.md\r\n    let { access_token } = await auth({\r\n      clientId: serviceCredentials.technicalAccount.clientId, // Client Id\r\n      technicalAccountId: serviceCredentials.id,              // Technical Account Id\r\n      orgId: serviceCredentials.org,                          // Adobe IMS Org Id\r\n      clientSecret: serviceCredentials.technicalAccount.clientSecret, // Client Secret\r\n      privateKey: serviceCredentials.privateKey,              // Private Key to sign the JWT\r\n      metaScopes: serviceCredentials.metascopes.split(','),   // Meta Scopes defining level of access the access token should provide\r\n      ims: `https://${serviceCredentials.imsEndpoint}`,       // IMS endpoint used to obtain the access token from\r\n    });\r\n\r\n    return access_token;\r\n  }\r\n\r\n  routeToAemPathFn(route) {\r\n    if (route === PUBLIC_URL + '.model.json' || route === \"/.model.json\") {\r\n      route = contentPath + '.model.json';\r\n\r\n    } else if (route.startsWith(PUBLIC_URL)) {\r\n      route = route.replace(PUBLIC_URL, contentPath);\r\n\r\n    } else if (!route.startsWith(contentPath)) {\r\n      route = contentPath + route;\r\n    }\r\n\r\n    return route;\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}